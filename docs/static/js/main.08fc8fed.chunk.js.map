{"version":3,"sources":["todoReducer.js","components/todoListItem/TodoListItem.jsx","components/todoList/TodosList.jsx","App.js","hooks/useForm.js","serviceWorkerRegistration.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","index","handleToggle","handleDelete","className","onClick","desc","TodosList","todos","i","init","JSON","parse","localStorage","getItem","App","useReducer","dispatch","initialState","useState","values","setValues","target","name","value","useForm","description","handleInputChange","reset","useEffect","setItem","stringify","length","todoId","onSubmit","e","preventDefault","trim","newTodo","Date","getTime","console","log","onChange","placeholder","autoComplete","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.08fc8fed.chunk.js","sourcesContent":["export const todoReducer = (state = [], action) =>{\r\n    switch ( action.type ) {\r\n        case 'add':\r\n            return [...state, action.payload];\r\n        case 'delete':\r\n\r\n            return state.filter( todo => todo.id !== action.payload )\r\n        case 'toggle':\r\n            return state.map( todo => (\r\n                todo.id === action.payload\r\n                    ? {...todo, done:!todo.done}\r\n                    : todo\r\n                ));\r\n        case 'toggle-old':\r\n            return state.map(todo =>{\r\n                if(todo.id === action.payload){\r\n                    return {\r\n                        ...todo,\r\n                        done: !todo.done \r\n                    }\r\n                }else{\r\n                    return todo;\r\n                }\r\n            });\r\n        default:\r\n\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const TodoListItem = ({todo, index ,handleToggle, handleDelete}) => {\r\n    return (\r\n        <li\r\n           \r\n            className=\"list-group-item\"\r\n        > \r\n            <p className={`${todo.done && 'complete'}`} onClick={()=>{handleToggle(todo.id)}}> {index+1}.{todo.desc}</p> \r\n            <button\r\n                onClick={()=>{ handleDelete(todo.id) }}\r\n                className=\"btn btn-danger\"\r\n            >\r\n                Borrar\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TodoListItem } from '../todoListItem/TodoListItem'\r\nexport const TodosList = ({todos, handleDelete, handleToggle}) => {\r\n    \r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n        {\r\n            todos.map( (todo, i) =>(\r\n                // todoListItem, todo, index\r\n                <TodoListItem  key={ todo.id } todo={todo} index ={i} handleDelete={handleDelete} handleToggle={handleToggle} />\r\n            ))\r\n        }\r\n    </ul>\r\n    )\r\n}\r\n","import React, { useEffect, useReducer } from 'react'\nimport { todoReducer } from './todoReducer';\nimport { useForm } from './hooks/useForm';\n\nimport './App.css';\nimport { TodosList } from './components/todoList/TodosList';\n\n\n\n\nconst init = () =>{ \n    return JSON.parse(localStorage.getItem('todos')) || [];\n}\nexport const App = () => {\n\n    const [ todos, dispatch ] = useReducer(todoReducer, [], init);\n\n    const [{ description }, handleInputChange, reset] = useForm({\n        description: ''\n    });\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos))\n    }, [todos]);\n\n    const handleDelete = (todoId) =>{\n        const action = {\n            type: 'delete',\n            payload: todoId\n\n        }\n        dispatch(action);\n    }\n    const handleToggle = (todoId) =>{\n        \n        dispatch({ type: 'toggle', payload: todoId});\n    }\n    // console.log(description);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(description.trim().length <= 1 ){\n            return;\n        }\n        const newTodo = {\n            id: new Date().getTime(),\n            desc: description,\n            done: false\n        }\n        const action = {\n            type: 'add',\n            payload: newTodo\n        }\n        dispatch(action);\n        reset()\n        console.log(todos);\n        \n    }\n\n    return (\n        <div>\n            <h1>CositasApp ({ todos.length })</h1>\n            <hr/>\n            <div className=\"row\">\n                <div className=\"col-md-7 mb-5\">\n                    {/* TodosList todo, handleDelete, handleToggle */}\n                    <TodosList todos={todos} handleDelete={handleDelete} handleToggle={handleToggle}/>\n                </div>\n\n                <div className=\"col-md-5 \">\n                    <h4>Agregar Cositas Por Hacer</h4>\n                    <hr/>\n                    <form onSubmit={handleSubmit}>\n                        <input \n                            type=\"text\"\n                            name=\"description\"\n                            className=\"form-control\"\n                            value={description}\n                            onChange={handleInputChange}\n                            placeholder=\"Aprender ...\"\n                            autoComplete=\"off\"\n                        />\n                        <div className=\"d-grid gap-2\">\n                            <button type=\"submit\" className=\"btn btn-outline-primary mt-1 btn-block\">\n                                Agregar\n                            </button>\n                        </div>\n                    </form>\n                </div>\n\n            </div>\n            \n        </div>\n    )\n}\n","import { useState } from 'react'\r\n\r\nexport const useForm = (initialState = {}) => {\r\n    \r\n    const [values, setValues] = useState(initialState);\r\n    const reset =  () =>{\r\n        setValues( initialState );\r\n    }\r\n    const handleInputChange = ( {target} ) =>{\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        })\r\n    }\r\n\r\n    return [values, handleInputChange, reset];\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\n"],"sourceRoot":""}